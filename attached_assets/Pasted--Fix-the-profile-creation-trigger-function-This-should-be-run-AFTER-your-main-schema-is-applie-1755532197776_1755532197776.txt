-- Fix the profile creation trigger function
-- This should be run AFTER your main schema is applied

-- Drop the existing trigger and function
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user();

-- Create a more robust function
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    -- Log the attempt
    RAISE NOTICE 'Creating profile for user: % with type: %', NEW.id, NEW.raw_user_meta_data->>'user_type';
    
    -- Check if profile already exists
    IF EXISTS (
        SELECT 1 FROM public.client_profiles WHERE user_id = NEW.id
    ) OR EXISTS (
        SELECT 1 FROM  public.cleaner_profiles WHERE user_id = NEW.id
    ) THEN
        RAISE NOTICE 'Profile already exists for user %, skipping creation', NEW.id;
        RETURN NEW;
    END IF;
    
    -- Create profile based on user type
    BEGIN
        IF NEW.raw_user_meta_data->>'user_type' = 'cleaner' THEN
            -- Create cleaner profile
            INSERT INTO public.cleaner_profiles (
                user_id,
                first_name,
                last_name,
                phone,
                business_name,
                national_id,
                business_license,
                vehicle_registration,
                service_area
            ) VALUES (
                NEW.id,
                COALESCE(NEW.raw_user_meta_data->>'first_name', 'FirstName'),
                COALESCE(NEW.raw_user_meta_data->>'last_name', 'LastName'),
                COALESCE(NEW.raw_user_meta_data->>'phone', ''),
                COALESCE(NEW.raw_user_meta_data->>'business_name', ''),
                COALESCE(NEW.raw_user_meta_data->>'national_id', '000000'),
                COALESCE(NEW.raw_user_meta_data->>'business_license', ''),
                COALESCE(NEW.raw_user_meta_data->>'vehicle_registration', ''),
                COALESCE(NEW.raw_user_meta_data->>'service_area', 'Unknown')
            );
            RAISE NOTICE 'Successfully created cleaner profile for user %', NEW.id;
        ELSE
            -- Create client profile (default)
            INSERT INTO  public.client_profiles (
                user_id,
                first_name,
                last_name,
                phone,
                address
            ) VALUES (
                NEW.id,
                COALESCE(NEW.raw_user_meta_data->>'first_name', 'FirstName'),
                COALESCE(NEW.raw_user_meta_data->>'last_name', 'LastName'),
                COALESCE(NEW.raw_user_meta_data->>'phone', ''),
                COALESCE(NEW.raw_user_meta_data->>'address', '')
            );
            RAISE NOTICE 'Successfully created client profile for user %', NEW.id;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            -- Log the error but don't fail the user creation
            RAISE WARNING 'Failed to create profile for user %: %', NEW.id, SQLERRM;
            -- Return NEW to allow user creation to succeed
            RETURN NEW;
    END;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION handle_new_user();

-- Test the function (optional)
-- SELECT handle_new_user();
