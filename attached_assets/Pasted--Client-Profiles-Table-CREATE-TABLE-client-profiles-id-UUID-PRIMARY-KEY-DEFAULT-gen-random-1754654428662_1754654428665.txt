-- Client Profiles Table
CREATE TABLE client_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    phone TEXT,
    avatar_url TEXT,
    address TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cleaner Profiles Table
CREATE TABLE cleaner_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    phone TEXT,
    national_id TEXT NOT NULL,
    vehicle_registration TEXT,
    business_license TEXT,
    business_name TEXT,
    service_area TEXT NOT NULL,
    is_mobile BOOLEAN DEFAULT true,
    has_garage BOOLEAN DEFAULT false,
    garage_address TEXT,
    working_hours JSONB DEFAULT '{"start": "08:00", "end": "18:00"}',
    is_active BOOLEAN DEFAULT true,
    rating DECIMAL(2,1) DEFAULT 0,
    total_reviews INTEGER DEFAULT 0,
    profile_image TEXT,
    bio TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Services Table
CREATE TABLE cleaner_services (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    duration INTEGER DEFAULT 60, -- in minutes
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Gallery Images Table
CREATE TABLE cleaner_gallery (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    caption TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Bookings Table
CREATE TABLE bookings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    client_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    service_id UUID REFERENCES cleaner_services(id),
    booking_type TEXT CHECK (booking_type IN ('mobile', 'garage')) NOT NULL,
    status TEXT CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled')) DEFAULT 'pending',
    scheduled_date DATE NOT NULL,
    scheduled_time TIME NOT NULL,
    location_address TEXT,
    location_coordinates POINT,
    total_amount DECIMAL(10,2) NOT NULL,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Reviews Table
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    booking_id UUID REFERENCES bookings(id) ON DELETE CASCADE,
    client_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5) NOT NULL,
    comment TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable RLS on all tables
ALTER TABLE client_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_gallery ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;

-- RLS Policies (same as before)
-- [Include all your RLS policies here exactly as you had them]
-- Allow users to select/update only their own profile
CREATE POLICY "Allow client read/update own profile"
ON client_profiles
FOR SELECT, UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Allow cleaner read/update own profile"
ON cleaner_profiles
FOR SELECT, UPDATE
USING (auth.uid() = user_id);

-- Functions to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_client_profiles_updated_at BEFORE UPDATE ON client_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_cleaner_profiles_updated_at BEFORE UPDATE ON cleaner_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bookings_updated_at BEFORE UPDATE ON bookings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Indexes for better performance (same as before)
-- [Include all your indexes here exactly as you had them]

-- Create a public function to create profiles
CREATE OR REPLACE FUNCTION public.create_user_profile(
    user_id UUID,
    user_type TEXT,
    first_name TEXT,
    last_name TEXT,
    phone TEXT,
    business_name TEXT DEFAULT NULL,
    national_id TEXT DEFAULT NULL,
    service_area TEXT DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
    IF user_type = 'client' THEN
        INSERT INTO public.client_profiles (user_id, first_name, last_name, phone)
        VALUES (user_id, first_name, last_name, phone);
    ELSIF user_type = 'cleaner' THEN
        INSERT INTO public.cleaner_profiles (
            user_id, first_name, last_name, phone, 
            business_name, national_id, service_area
        )
        VALUES (
            user_id, first_name, last_name, phone,
            business_name, national_id, service_area
        );
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;