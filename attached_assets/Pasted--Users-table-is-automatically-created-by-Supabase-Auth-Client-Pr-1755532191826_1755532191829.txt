-- Users table is automatically created by Supabase Auth

-- =======================
-- Client Profiles
-- =======================
CREATE TABLE client_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  avatar_url TEXT,
  address TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Cleaner Profiles
-- =======================
CREATE TABLE cleaner_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  business_name VARCHAR(200),
  national_id VARCHAR(50) NOT NULL,
  business_license VARCHAR(100),
  vehicle_registration VARCHAR(50),
  service_area VARCHAR(200) NOT NULL,
  is_mobile BOOLEAN DEFAULT true,
  has_garage BOOLEAN DEFAULT false,
  garage_address TEXT,
  working_hours JSONB DEFAULT '{"start": "08:00", "end": "18:00"}',
  is_active BOOLEAN DEFAULT true,
  is_verified BOOLEAN DEFAULT false,
  rating DECIMAL(3,2) DEFAULT 0,
  total_reviews INTEGER DEFAULT 0,
  profile_image TEXT,
  cover_image_url TEXT,
  bio TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Cleaner Services
-- =======================
CREATE TABLE cleaner_services (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cleaner_id UUID REFERENCES cleaner_profiles(id) ON DELETE CASCADE,
  name VARCHAR(200) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  duration_minutes INTEGER DEFAULT 60,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Cleaner Images
-- =======================
CREATE TABLE cleaner_images (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cleaner_id UUID REFERENCES cleaner_profiles(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  alt_text VARCHAR(200),
  is_cover BOOLEAN DEFAULT false,
  order_index INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Bookings
-- =======================
CREATE TABLE bookings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  client_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  service_id UUID REFERENCES cleaner_services(id),
  status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled')),
  booking_type VARCHAR(20) DEFAULT 'mobile' CHECK (booking_type IN ('mobile', 'garage')),
  scheduled_date DATE NOT NULL,
  scheduled_time TIME NOT NULL,
  client_address TEXT,
  total_price DECIMAL(10,2) NOT NULL,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Reviews
-- =======================
CREATE TABLE reviews (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  booking_id UUID REFERENCES bookings(id) ON DELETE CASCADE,
  client_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  cleaner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================
-- Indexes
-- =======================
CREATE INDEX idx_cleaner_profiles_user_id ON cleaner_profiles(user_id);
CREATE INDEX idx_client_profiles_user_id ON client_profiles(user_id);
CREATE INDEX idx_cleaner_services_cleaner_id ON cleaner_services(cleaner_id);
CREATE INDEX idx_cleaner_images_cleaner_id ON cleaner_images(cleaner_id);
CREATE INDEX idx_bookings_client_id ON bookings(client_id);
CREATE INDEX idx_bookings_cleaner_id ON bookings(cleaner_id);
CREATE INDEX idx_reviews_cleaner_id ON reviews(cleaner_id);

-- =======================
-- RLS
-- =======================
ALTER TABLE client_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE cleaner_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;

-- RLS Policies for client_profiles
CREATE POLICY "Users can view all client profiles" ON client_profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own client profile" ON client_profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own client profile" ON client_profiles FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own client profile" ON client_profiles FOR DELETE USING (auth.uid() = user_id);

-- RLS Policies for cleaner_profiles
CREATE POLICY "Users can view all cleaner profiles" ON cleaner_profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own cleaner profile" ON cleaner_profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own cleaner profile" ON cleaner_profiles FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own cleaner profile" ON cleaner_profiles FOR DELETE USING (auth.uid() = user_id);

-- RLS Policies for cleaner_services
CREATE POLICY "Users can view all cleaner services" ON cleaner_services FOR SELECT USING (true);
CREATE POLICY "Cleaners can manage their own services" ON cleaner_services FOR ALL USING (
  EXISTS (
    SELECT 1 FROM cleaner_profiles 
    WHERE user_id = auth.uid() AND id = cleaner_id
  )
);

-- RLS Policies for cleaner_images
CREATE POLICY "Users can view all cleaner images" ON cleaner_images FOR SELECT USING (true);
CREATE POLICY "Cleaners can manage their own images" ON cleaner_images FOR ALL USING (
  EXISTS (
    SELECT 1 FROM cleaner_profiles 
    WHERE user_id = auth.uid() AND id = cleaner_id
  )
);

-- RLS Policies for bookings
CREATE POLICY "Users can view their own bookings" ON bookings FOR SELECT USING (
  auth.uid() = client_id OR auth.uid() = cleaner_id
);
CREATE POLICY "Clients can create bookings" ON bookings FOR INSERT WITH CHECK (auth.uid() = client_id);
CREATE POLICY "Users can update their own bookings" ON bookings FOR UPDATE USING (
  auth.uid() = client_id OR auth.uid() = cleaner_id
);

-- RLS Policies for reviews
CREATE POLICY "Users can view all reviews" ON reviews FOR SELECT USING (true);
CREATE POLICY "Clients can create reviews for their bookings" ON reviews FOR INSERT WITH CHECK (
  auth.uid() = client_id AND 
  EXISTS (SELECT 1 FROM bookings WHERE id = booking_id AND client_id = auth.uid())
);
CREATE POLICY "Users can update their own reviews" ON reviews FOR UPDATE USING (auth.uid() = client_id);

-- =======================
-- Trigger: Update updated_at
-- =======================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_client_profiles_updated_at BEFORE UPDATE ON client_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_cleaner_profiles_updated_at BEFORE UPDATE ON cleaner_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bookings_updated_at BEFORE UPDATE ON bookings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =======================
-- Function: Create Profile on Signup
-- =======================
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.raw_user_meta_data->>'user_type' = 'cleaner' THEN
        INSERT INTO cleaner_profiles (
            user_id,
            first_name,
            last_name,
            phone,
            business_name,
            national_id,
            business_license,
            vehicle_registration,
            service_area
        ) VALUES (
            NEW.id,
            COALESCE(NEW.raw_user_meta_data->>'first_name', 'FirstName'),
            COALESCE(NEW.raw_user_meta_data->>'last_name', 'LastName'),
            COALESCE(NEW.raw_user_meta_data->>'phone', ''),
            COALESCE(NEW.raw_user_meta_data->>'business_name', ''),
            COALESCE(NEW.raw_user_meta_data->>'national_id', '000000'),
            COALESCE(NEW.raw_user_meta_data->>'business_license', ''),
            COALESCE(NEW.raw_user_meta_data->>'vehicle_registration', ''),
            COALESCE(NEW.raw_user_meta_data->>'service_area', 'Unknown')
        );
    ELSE
        INSERT INTO client_profiles (
            user_id,
            first_name,
            last_name,
            phone,
            address
        ) VALUES (
            NEW.id,
            COALESCE(NEW.raw_user_meta_data->>'first_name', 'FirstName'),
            COALESCE(NEW.raw_user_meta_data->>'last_name', 'LastName'),
            COALESCE(NEW.raw_user_meta_data->>'phone', ''),
            COALESCE(NEW.raw_user_meta_data->>'address', '')
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger on insert to create profile
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION handle_new_user();
