version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cleaning-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: cleaning_user
      POSTGRES_PASSWORD: cleaning_pass
      POSTGRES_DB: cleaning_marketplace
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d/
    networks:
      - cleaning-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cleaning-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cleaning-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cleaning-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://cleaning_user:cleaning_pass@postgres:5432/cleaning_marketplace
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - cleaning-network

  # Web Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: cleaning-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
      NEXT_PUBLIC_WEBSOCKET_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cleaning-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cleaning-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web
    networks:
      - cleaning-network

volumes:
  postgres_data:
  redis_data:

networks:
  cleaning-network:
    driver: bridge
